#pragma once
/*Описание экспериментов так или иначе есть в бумажных заметках*/
/*
#define NEURONS_NUMBER 4     //количество нейронов. Не забывать менять размер матрицы
#ifdef NEURO_CPP //Метка чтобы следующий текст не обрабатывался при инклуде synaps.h из neuro++.cpp
//Матрица нейронных связей каждый с каждым. Проверка автогенерации при 0-ом определителе для 3-х нейроновю. 
//Вроде работает при отрицательном балансе, общий заряд постепенно уменьшается, пока автогенерация не прекратиться
#define A 34.3257529/40
double synapsMatrix[NEURONS_NUMBER][NEURONS_NUMBER] = {    
	{0.0,   4*A,    4*A , 4*A},
	{4*A,   0.0,    4*A , 4*A},
	{4*A,   4*A,    0.0 , 4*A},
	{4*A,   4*A,    4*A , 0.0},
};
//Массив порогов нейронов
double porogArray[NEURONS_NUMBER] = {5, 10, 14, 21};
//Массив стартовых значений зарядов
double chargeArray[NEURONS_NUMBER] = {5, 10, 14, 21};
//Массив наличия свойства p-нейрона
int    pPropierty[NEURONS_NUMBER] = {0, 0, 0, 0};
//Массив внешних воздействий на нейроны
double bs[NEURONS_NUMBER]         = {0, 0, 0, 0};
#endif
*/
/*
#define NEURONS_NUMBER 3     //количество нейронов. Не забывать менять размер матрицы
#ifdef NEURO_CPP //Метка чтобы следующий текст не обрабатывался при инклуде synaps.h из neuro++.cpp
//Матрица нейронных связей каждый с каждым. Проверка автогенерации при 0-ом определителе для 3-х нейроновю. 
//Вроде работает при отрицательном балансе, общий заряд постепенно уменьшается, пока автогенерация не прекратиться
double synapsMatrix[NEURONS_NUMBER][NEURONS_NUMBER] = {    
	{0,    1,    0},
	{0,    0,    1},
	{0,    0.5,    0}
};
//Массив порогов нейронов
double porogArray[NEURONS_NUMBER] = {0, 2, 2};
//Массив стартовых значений зарядов
double chargeArray[NEURONS_NUMBER] = {0, 0, 0};
//Массив наличия свойства p-нейрона
int    pPropierty[NEURONS_NUMBER] = {0, 0, 0};
//Массив внешних воздействий на нейроны
double bs[NEURONS_NUMBER]         = {0, 0, 0};
#endif
*/
/*
#define NEURONS_NUMBER 3     //количество нейронов. Не забывать менять размер матрицы
#ifdef NEURO_CPP //Метка чтобы следующий текст не обрабатывался при инклуде synaps.h из neuro++.cpp
//Матрица нейронных связей каждый с каждым. Проверка автогенерации при 0-ом определителе для 3-х нейроновю. 
//Вроде работает при отрицательном балансе, общий заряд постепенно уменьшается, пока автогенерация не прекратиться
double synapsMatrix[NEURONS_NUMBER][NEURONS_NUMBER] = {    
	{0.0,        6,   5},
	{6.5,      0.0,   5},
	{5.26666666, 8, 0.0}
};
//Массив порогов нейронов
double porogArray[NEURONS_NUMBER] = {10, 12, 14};
//Массив стартовых значений зарядов
double chargeArray[NEURONS_NUMBER] = {0, 10, 28};
//Массив наличия свойства p-нейрона
int    pPropierty[NEURONS_NUMBER] = {0, 0, 0};
//Массив внешних воздействий на нейроны
double bs[NEURONS_NUMBER]         = {0, 0, 0};
#endif
*/
/*
#define NEURONS_NUMBER 2     //количество нейронов. Не забывать менять размер матрицы
#ifdef NEURO_CPP //Метка чтобы следующий текст не обрабатывался при инклуде synaps.h из neuro++.cpp
//Матрица нейронных связей каждый с каждым. Проверка автогенерации при 0-ом определителе для 2-х нейроновю. 
//Вроде работает при отрицательном балансе, общий заряд постепенно уменьшается, пока автогенерация не прекратиться
double synapsMatrix[NEURONS_NUMBER][NEURONS_NUMBER] = {    
	{0.0, 20},
	{2, 0.0},
};
//Массив порогов нейронов
double porogArray[NEURONS_NUMBER] = {4, 10};
//Массив стартовых значений зарядов
double chargeArray[NEURONS_NUMBER] = {4, 10};
//Массив наличия свойства p-нейрона
int    pPropierty[NEURONS_NUMBER] = {0, 0};
//Массив внешних воздействий на нейроны
double bs[NEURONS_NUMBER]         = {0,0};
#endif
*/

/*
#define NEURONS_NUMBER 4     //количество нейронов. Не забывать менять размер матрицы
#ifdef NEURO_CPP //Метка чтобы следующий текст не обрабатывался при инклуде synaps.h из neuro++.cpp
//Матрица нейронных связей каждый с каждым.4 нейрона
#define POROG 1.7320508075688772 //- значение порога устойчивого возбуждения равно корень из 3. При этом частота 4-ого нейрона равна корень из 3
double synapsMatrix[NEURONS_NUMBER][NEURONS_NUMBER] = {    
	{0, 0, 0, 1},
	{0, 0, 0, 1},
	{0, 0, 0, 1},
	{1, 1, 1, 0}
};

//Массив порогов нейронов
double porogArray[NEURONS_NUMBER] = {POROG, POROG, POROG, POROG};
//Массив стартовых значений зарядов
double chargeArray[NEURONS_NUMBER] = {2, 2, 2, 2};
//Массив наличия свойства p-нейрона
int    pPropierty[NEURONS_NUMBER] = {0, 0, 0, 0};
//Массив внешних воздействий на нейроны
double bs[NEURONS_NUMBER]={0,0,0,0};
#endif
*/

/*#define NEURONS_NUMBER 3     //количество нейронов. Не забывать менять размер матрицы
#ifdef NEURO_CPP //Метка чтобы следующий текст не обрабатывался при инклуде synaps.h из neuro++.cpp
//Матрица нейронных связей каждый с каждым. Логические элементы. Пока ничего интересного
double synapsMatrix[NEURONS_NUMBER][NEURONS_NUMBER] = {    
	{0.0, -10 , 10},
	{-10, 0, 10},
	{0, 0, 0}
};
//Массив порогов нейронов
double porogArray[NEURONS_NUMBER] = {10, 10, 10};
//Массив стартовых значений зарядов
double chargeArray[NEURONS_NUMBER] = {0, 0, 0};
//Массив наличия свойства p-нейрона
int    pPropierty[NEURONS_NUMBER] = {0, 0, 0};
//Массив внешних воздействий на нейроны
double bs[NEURONS_NUMBER]         = {1,1,0};
#endif
*/

/*
#define NEURONS_NUMBER 6     //количество нейронов. Не забывать менять размер матрицы
#ifdef NEURO_CPP //Метка чтобы следующий текст не обрабатывался при инклуде synaps.h из neuro++.cpp
//Матрица нейронных связей каждый с каждым. Частотный фильтр с применение 2-х p-нейронов. Так же в качестве генераторов используются сами нейроны, замкнутые на себя
//!!!! Веса должны быть согласно схеме, где надо равны, где надо должно быть умножение. Остальное должно регулироваться частотами
double synapsMatrix[NEURONS_NUMBER][NEURONS_NUMBER] = {    
	{0, 0, -10, 0, 0, 0},
	{0, 0, 10, 0, 0, 0},
	{0, 0, 0, 0, -10, 0},
	{0, 0, 0, 0, 10, 0},
	{0, 0, 0, 0, 0, 10},
	{0, 0, 0, 0, 0, 0}
};
//Массив порогов нейронов
double porogArray[NEURONS_NUMBER] = {10, 10, 10, 10, 10, 10};
//Массив стартовых значений зарядов
double chargeArray[NEURONS_NUMBER] = {0, 0, 0, 0, 0, 0};
//Массив наличия свойства p-нейрона
int    pPropierty[NEURONS_NUMBER] = {0, 0, 1, 0, 1, 0};
//Массив внешних воздействий на нейроны
double bs[NEURONS_NUMBER]={12,10,0,10,0,0};
#endif
*/

/*
#define NEURONS_NUMBER 3     //количество нейронов. Не забывать менять размер матрицы
#ifdef NEURO_CPP //Метка чтобы следующий текст не обрабатывался при инклуде synaps.h из neuro++.cpp
//Матрица нейронных связей каждый с каждым. Инь-янь с выходом в 3-ем нейроне
double synapsMatrix[NEURONS_NUMBER][NEURONS_NUMBER] = {    
	{0.0, 10 , 0},
	{-10, 0, 0},
	{0, 0, 0}
};
//Массив порогов нейронов
double porogArray[NEURONS_NUMBER] = {10, 10, 10};
//Массив стартовых значений зарядов
double chargeArray[NEURONS_NUMBER] = {10, 0, 0};
//Массив наличия свойства p-нейрона
int    pPropierty[NEURONS_NUMBER] = {0, 0, 1};
//Массив внешних воздействий на нейроны
double bs[NEURONS_NUMBER]={20,0,0};
#endif
*/


/*#define NEURONS_NUMBER 3     //количество нейронов. Не забывать менять размер матрицы
#ifdef NEURO_CPP //Метка чтобы следующий текст не обрабатывался при инклуде synaps.h из neuro++.cpp
//Матрица нейронных связей каждый с каждым.3 нейрона Автогенератор
double synapsMatrix[NEURONS_NUMBER][NEURONS_NUMBER] = {    
	{0.0, 10, 2},
	{12, 0.0, 0},
	{-5, 0, 0.0}
};
//Массив порогов нейронов
double porogArray[NEURONS_NUMBER] = {10, 10, 10};
//Массив стартовых значений зарядов
double chargeArray[NEURONS_NUMBER] = {30, 10, 0};
//Массив наличия свойства p-нейрона
int    pPropierty[NEURONS_NUMBER] = {0, 0, 0};
//Массив внешних воздействий на нейроны
double bs[NEURONS_NUMBER]={0,0,0};
#endif
*/


#define NEURONS_NUMBER 4     //количество нейронов. Не забывать менять размер матрицы
#ifdef NEURO_CPP //Метка чтобы следующий текст не обрабатывался при инклуде synaps.h из neuro++.cpp
//Матрица нейронных связей каждый с каждым.4 нейрона. Решение соответствующей системы ЛУ, представленной матрицей synapsMatrix и bs
//Необходимо найти период по зарядом. Возможно это особая точка
double synapsMatrix[NEURONS_NUMBER][NEURONS_NUMBER] = {    
	{0.0, 20, 30, 20},
	{20, 0.0, 20, 20},
	{20, 20, 0.0, 20},
	{20, 20, 20, 0.0}
};
//Массив порогов нейронов
double porogArray[NEURONS_NUMBER] = {100, 100, 100, 100};
//Массив стартовых значений зарядов
//double chargeArray[NEURONS_NUMBER] = {-19, 11, 11, -9};
double chargeArray[NEURONS_NUMBER] = {1000*100, 1000*100, 1000*100, 1000*100};
//Массив наличия свойства p-нейрона
int    pPropierty[NEURONS_NUMBER] = {0, 0, 0, 0};
//Массив внешних воздействий на нейроны
//double bs[NEURONS_NUMBER]={20,-10,-10,10};
double bs[NEURONS_NUMBER]={0,0,0,0};
#endif

